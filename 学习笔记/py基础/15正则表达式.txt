day15
2018.3.30
16:08

RE模块简介
	概述
	    正则表达式通常用来检索,替换符合某个模式(规则)的文本
	re.match函数
	  功能:尝试从字符串的起始位置开始匹配 一个规则,如果不是起始位置匹配成功的话,match()就返回None
	  原型: re.match(pattern,string,flags=0)
	  参数:
	      pattern 匹配的正则表达式
	      string  要匹配的字符串
	      flags   标志位,用于控制正则表达式的匹配方式,
	           re.I  匹配时 不区分大小写
		   re.L  做本地化识别(locale-aware)匹配
		   re.M  多行匹配,影响^和$
		   re.S  使  .  匹配包括换行符在内的所有字符
		   re.U  根据Unicode字符集解析字符.这个标志影响\w , \W , \b , \B
		   re.X  该标志通过给予更灵活的格式
	re.search函数
	    功能:扫描整个字符串并返回第一个成功的匹配
	    原型: re.search(pattern,string,flags=0)
	    参数: pattern 正则表达式    string 原字符串  flags  标志
	re.findall函数
	    功能:扫描整个字符串,并返回结果列表
	    原型:re.findall(pattern,string,flags=0)
	    参数: 匹配的正则表达式   要匹配的字符串   标志位
	区别re.match只匹配字符串的开始,如果字符串的开始不符合正则表达式,则匹配失败,函数返回None;re.search匹配整个字符串,直到找到一个匹配

正则表达式元字符
	匹配单个字符与数字
		.  匹配所有字符  除了换行符
		[0-9]  匹配0到9的数字
		[awen] 匹配a w e n 任意一个字符
		[a-z]  匹配所有小写字母
		[A-Z]  匹配所有大写字母
		[a-zA-Z0-9] 匹配字母和数字
		[^abcd]  匹配除 abcd 外的所有字符
		[^7-9]   匹配除 7-9 外的所有字符
		\d	匹配所有数字
		\D	匹配所有非数字
		\w	匹配所有数字 字母 下划线
		\W	匹配所有非数字,字母,下划线
		\s	匹配任意空白字符  包括空格 换页符 换行符 回车符 制表符 等价于 [ \f\n\r\t]
		\S	匹配所有非空字符 
	描字符,边界字符
	    ^ 行首匹配
	    $ 行尾匹配
	    \A 行首匹配   标识符re.M 对其有影响 只匹配整个字符串的开头
	    \Z 行尾匹配	  标识符re.M 对其有影响  只匹配整个字符串的行尾
	    \b 匹配一个单词边界  也就是单词和空格间的位置 nerver 匹配后部er
	    \B 匹配非单词边界    nerver 匹配前部er 
	匹配多个字符
		以下的x,y,z均为假设的普通字符,不是正则表达式元字符
		(xyz)  匹配括号中的xyz(作为一组整体去匹配)
		x?	匹配0个或一个x,非贪婪方式
		     例如:aaa?    print(re.findall('aaa?','a aa aaa aaaa'))
		     会返回   ['aa','aaa','aaa']
		x*	匹配0个或者任意多个x    延伸: .*  匹配0个或者任意多个任意字符(除换行符)
		x+	匹配至少一个x
		x{n}	匹配n个x
		x{n,]	匹配至少n个x  
		x{n,m}	匹配大于等于n个  小于等于m个x
		x{,m}	匹配至多m个x
		x|y	| 表示或  x或y

RE模块深入
	切分字符串
	    之前学的:str.split()    切割以空格分割的字符串
	    正则方法:re.split(r' +',str1)    
	字符串的替换和修改
	    原型
	        sub(rule,replace,target[,count])
		subn(rule,replace,target[,count])
	    功能:在目标字符串中按规则查找匹配的字符串,再把它们替换成指定的字符串,可以指定一个最多替换次数,否则将替换所有匹配到的字符串
	    参数:rule   匹配的正则表达式  replace  指定用来替换的字符串  target 目标字符串  count 最多替换次数
	    sub与subn 的区别  前者返回一个替换后的字符串,后者返回一个元组,第一个元素是替换后的字符串,第二个元素表明产生了多少次替换
	分组
	    概述:除了简单判断是否匹配之外,正则表达式还有提取子串的功能,用()表示的就是要提取的分组group
	    str4 = '010-10101010'
	    m = re.match(r'(?P<first>\d{3})-(?P<last>\d{8})',str4)
	    #使用序号获取对应组的信息,group(0) 表示原始字符串
	    print(m.group(0))   打印 010-10101010
	    print(m.group(1))	打印 010
	    print(m.group(2))	打印 10101010
	    print(m.group(first))	打印 010
	    print(m.group(last))	打印 10101010
	    print(m.groups())	打印各组的情况('010-10101010', '010', '10101010')
	    解释:当正则表达式中定义了组,就可以在match对象上有group()方法提取子串    group(0)表示原始字符串  group(1) 表示第一个 ... 排序方式是  由外到内  由左到右
	编译
	    概述: 在使用正则表达式时,re模块内部会做两件事1 编译正则表达式 2 用编译后的正则表达式去匹配字符串
	    优点: 当匹配次数多时,更加效率
	    格式:re.compile(rule[,flag])
	    示例:
	        a = '\d{2}\w{3}'
		b = re.compile(a)
		print(b.match('123abc'))

常用正则表达式
	qq
	mail
	mobile
	phone
	user
	passwd
	birthday





















