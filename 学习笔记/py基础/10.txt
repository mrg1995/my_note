day10
2018.3.24
16:22


模块
    概述:将相似功能的函数分组,分到不同的文件中去,每个文件的大致功能通过文件名来体现.一个py文件就是一个模块
    优点:
        提高代码的可维护性
	提高代码的复用性
	引用其他的模块(内置模块,自定义模块和第三方模块)

使用标准库中的模块
	import time
	import os
	import pickle

使用自定义模块
	import语句
	    格式:import  module1[,module2]...
	    注意: 引入自定义模块,不要加py后缀只需要模块名即可
		  一个模块只会被引入一次,不管你执行多少次import.
	    使用模块中的内容:
		格式: 模块名.函数名/变量名
		例:  guo.sayGood()
	from...import...语句:
	    格式:from module import name1[,name2]...
	    作用:从模块中导入一个指定的部分到当前命名空间
	    注意:没有被引入的函数不能被使用
	         程序内容的函数可以将模块中的同名函数覆盖
	from...import * 
	    作用:把一个模块中所有的内容全部导入当前命名空间
	    注意:程序内容的函数可以将模块中的同名函数覆盖
	         最好不要过多的使用

__name__属性
    问题: 一个模块被另一个程序引入,另一个程序会执行模块中的代码
    解决: 每个模块都有一个__name__属性,当其值等于'__main__'时,表明该模块自身在执行.否则被引入其他文件
    当前文件如果为程序的入口文件,则__name__属性的值为__main__

包
    问题: 如果不同的人编写的模块同名怎么办
    解决:按目录来组织模块,为包
    特点: 只要顶层的包不起冲突,那么模块都不会与其他发生冲突
    注意:目录只有包含__init__.py的文件才会被认作是一个包,主要是为了避免一些滥竽充数的名字
    使用:import 包名.模块名










































