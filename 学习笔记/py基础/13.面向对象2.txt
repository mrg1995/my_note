day13
2018.3.28
16:31



单继承
    例如 : class Worker(Person)
    子类在继承的时候,在定义类时,小括号()中是父类的名字
    object是所有类的根类/超类/基类
    父类的属性,方法,会被继承给子类
    私有属性不能直被对象直接访问,但是可以通过公有方法访问
    私有方法,不能被对象直接访问,但是可以通过公有方法访问
    私有属性,方法起到安全的作用
    super(Student, self).__init__(name,age,heigth)  #继承父类的 __init__ 函数
   
方法的重写
    重写: 将函数重新定义一遍  就是子类中,有个和父类相同名字的方法,在子类中的方法会覆盖掉父类中同名的方法 (如果需要父类的方法,可以使用super函数)
    对于子类方法的重写,就是对于父类相同的方法名进行函数体的改写,从而表现出父类与子类的不同特性,但是,对于初始化操作,不能直接改写,否则可能出错
    子类调用父类的方法 super.方法 super(Student, self).work()

多继承的实现
    class Child(Father,Mother)
    多继承,即子类有多个父类,并且具有他们的特征
    语法: 定义一个子类,继承自A,B,C
	class C(A,B,C)
	#假设A,B,C中都有Work方法
	  super(C, self).work() 继承的是A中的work方法
          super(A, self).work() 继承的是B中的work方法
	  super(B, self).work() 继承的是C中的work方法
	  __init__方法也一样  可以类似的去理解

    python中是可以多继承,父类中的方法,属性,子类会继承
    print(C.__mro__)  可以查看C类的对象搜索方法的先后顺序
    父类中的私有属性,只能通过公用方法访问
    父类中的私有方法,只能通过公用方法调用
    如果子类中的构造函数没写,会按顺序从父类列表中找,继承第一个有构造函数的父类
    如果子类中的构造函数写了,会覆盖父类中的构造函数

对象属性与类属性
    类属性: 在类的(非方法里)属性属于类属性(用类名来调用)
    对象属性: 在方法中的属性属于对象属性(用对象来调用)
    对象属性的优先级高于类属性
    删除对象中的属性时,再调用时会使用同名的类属性
    不要将类属性和对象属性重名,因为对象属性会屏蔽掉类属性.但是当删除对象属性后,再调用又能使用类属性了
    类属性不属于对象,但能通过对象来调用
    可以几个对象共用一个类属性   
    注意:类属性无法被删除

动态的给实例添加属性与方法并使用(__slots__)
    动态的给对象添加对象属性:  对象名.新属性名 = 值  只对该对象有作业,其他对象无此新属性
    动态的添加方法  from types import MethodType
    		    def say(self):
		        print('speak')
		    per.speak = MethodType(say,per)  #给实例绑定一个方法
		    per.speak()
    注意: 给一个实例绑定的方法,对另一个实例是不起作用的
    如何限制class的属性
        __slots__变量
	使用   class Person(object):
	            __slots__=('name','age','speak')
	用元组定义允许绑定的属性名称,动态绑定的属性名需要是元组中的名字
	注意:__slots__ 定义的属性仅对当前类起作用,对继承的子类是不起作用的

@property 私有属性调用
     @property 将私有属性装饰成可以 以  对象名.属性名 的方式直接访问
      例如 @property
          def age(self):
            return self.__age
     @私有属性名.setter   将私有属性装饰成可以以 对象名.属性名 = 值 的方式直接修改
      def age(self, age):
        if age < 0:
            age = 0
        self.__age = age







































